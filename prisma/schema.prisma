// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  email          String?   @unique
  name           String?
  displayName    String?   @default("")
  image          String?
  isAdmin        Boolean   @default(false)
  isOwner        Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  topics         Topic[]   @relation("userTopics")
  tasks          Task[]
  comments       Comment[]
  following      User?     @relation("userFollowers", fields: [followingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  followingId    String?   @db.ObjectId
  followers      User[]    @relation("userFollowers")
  totalTopics    Int       @default(0)
  totalComments  Int       @default(0)
  totalTasks     Int       @default(0)
  totalFollowers Int       @default(0)
  totalFollowing Int       @default(0)
  likes          Like[]
}

model Topic {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  description           String
  resource              String?
  isApproved            Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  author                User      @relation("userTopics", fields: [authorId], references: [id])
  authorId              String    @db.ObjectId
  comments              Comment[]
  totalComments         Int       @default(0)
  totalApprovedComments Int       @default(0)
  totalLikes            Int       @default(0)
  totalRepost           Int       @default(0)
  likes                 Like[]
}

model Comment {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  content         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User?     @relation(fields: [userId], references: [id])
  userId          String    @db.ObjectId
  topic           Topic?    @relation(fields: [topicId], references: [id])
  topicId         String    @db.ObjectId
  isApproved      Boolean   @default(false)
  parentComment   Comment?  @relation("commentReplies", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentCommentId String?   @db.ObjectId
  replies         Comment[] @relation("commentReplies")
  totalReplies    Int       @default(0)
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  topic     Topic    @relation(fields: [topicId], references: [id])
  topicId   String   @db.ObjectId
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  lable       String?
  isCompleted Boolean
  isImportant Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}
