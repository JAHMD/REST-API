// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  email          String?    @unique
  name           String?
  display_name   String?    @default("")
  image          String?
  admin          Boolean    @default(false)
  owner          Boolean    @default(false)
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  topics         Topic[]
  tasks          Task[]
  Comments       Comment[]
  Followers      Follower[]
  totalTopics    Int        @default(0)
  totalComments  Int        @default(0)
  totalLikes     Int        @default(0)
  totalTasks     Int        @default(0)
  totalFollowers Int        @default(0)
  totalFollowing Int        @default(0)
}

model Follower {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     String   @db.ObjectId
  User       User     @relation(fields: [userId], references: [id])
}

model Topic {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  link          String?
  approved      Boolean   @default(false)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  userId        String    @db.ObjectId
  User          User      @relation(fields: [userId], references: [id])
  Comments      Comment[]
  totalComments Int       @default(0)
  totalLikes    Int       @default(0)
}

model Comment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  User           User     @relation(fields: [userId], references: [id])
  Topic          Topic    @relation(fields: [topicId], references: [id])
  authorApproved Boolean  @default(false)
  approved       Boolean  @default(false)
  isReply        Boolean  @default(false)
  topicId        String   @db.ObjectId
  userId         String   @db.ObjectId
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  lable       String?
  isCompleted Boolean
  isImportant Boolean
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  userId      String   @db.ObjectId
  User        User     @relation(fields: [userId], references: [id])
}

model Contact {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String
  message    String
  created_at DateTime @default(now())
}
