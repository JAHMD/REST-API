// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId
  slug                String
  email               String         @unique
  name                String
  avatar              String?
  bio                 String?
  jobTitle            String?
  owner               Boolean        @default(false)
  moderator           Boolean        @default(false)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  topics              Topic[]        @relation("userTopics")
  approvedTopicsCount Int            @default(0)
  topicsCount         Int            @default(0)
  savedTopics         SavedTopic[]   @relation("userSavedTopics")
  savedTopicsCount    Int            @default(0)
  tasks               Task[]
  tasksCount          Int            @default(0)
  comments            Comment[]
  commentsCount       Int            @default(0)
  likes               Like[]
  likesCount          Int            @default(0)
  commentLikes        CommentLike[]
  commentLikesCount   Int            @default(0)
  following           Follow[]       @relation("userFollowing")
  followingCount      Int            @default(0)
  followers           Follow[]       @relation("userFollowers")
  followersCount      Int            @default(0)
  notifications       Notification[]
  notificationsCount  Int            @default(0)
}

model Follow {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String @db.ObjectId
  followingId String @db.ObjectId
  follower    User   @relation("userFollowers", fields: [followerId], references: [id])
  following   User   @relation("userFollowing", fields: [followingId], references: [id])
}

model Notification {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  type         String // e.g., 'comment', 'like', 'follow', etc.
  message      String // Notification message content
  read         Boolean  @default(false) // Whether the user has read the notification
  createdAt    DateTime @default(now())
  notifiedBy   User     @relation(fields: [notifiedById], references: [id])
  notifiedById String   @db.ObjectId
}

model Topic {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  resources    String[]
  approved     Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  author       User         @relation("userTopics", fields: [authorId], references: [id])
  authorId     String       @db.ObjectId
  comments     Comment[]
  commentCount Int          @default(0)
  likes        Like[]
  likesCount   Int          @default(0)
  savedBy      SavedTopic[] @relation("userSavedTopics")
  categories   Category[]   @relation(fields: [categoryIds], references: [id])
  categoryIds  String[]     @db.ObjectId
}

model SavedTopic {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId  String   @db.ObjectId
  topicId String   @db.ObjectId
  user    User     @relation("userSavedTopics", fields: [userId], references: [id])
  topic   Topic    @relation("userSavedTopics", fields: [topicId], references: [id])
  savedAt DateTime @default(now())
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String
  description String
  topics      Topic[]  @relation(fields: [topicIds], references: [id])
  topicIds    String[] @db.ObjectId
  topicsCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  content         String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User?         @relation(fields: [userId], references: [id])
  userId          String        @db.ObjectId
  topic           Topic?        @relation(fields: [topicId], references: [id])
  topicId         String        @db.ObjectId
  approved        Boolean       @default(false)
  parentComment   Comment?      @relation("commentReplies", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentCommentId String?       @db.ObjectId
  replies         Comment[]     @relation("commentReplies")
  repliesCount    Int           @default(0)
  likes           CommentLike[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  topic     Topic    @relation(fields: [topicId], references: [id])
  topicId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommentLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  label       String?
  completed   Boolean
  important   Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}
